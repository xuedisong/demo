package com.cloudhua.imageplatform.aop;

import com.cloudhua.imageplatform.domain.HttpEnv;
import com.cloudhua.imageplatform.domain.Token;
import com.cloudhua.imageplatform.persistence.TokenMapper;
import com.cloudhua.imageplatform.service.exception.RespJsonErrorMsg;
import com.cloudhua.imageplatform.service.exception.StatusCode;
import com.cloudhua.imageplatform.service.log.Logger;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Map;

import static com.cloudhua.imageplatform.service.utils.HttpUtils.get;

/**
 * Created by yangchao on 2017/8/22.
 */
@Aspect
@Component
public class AuthedInterceptor {

    private static Logger logger = Logger.getInst(AuthedInterceptor.class);

    @Pointcut("execution(* com.cloudhua.imageplatform.controller..*(..)) " +
            "&& @annotation(org.springframework.web.bind.annotation.RequestMapping)")
    private void checkLoginPointcut() {}

    @Autowired
    private TokenMapper tokenMapper;
    /**
     * 检查用户的登录状态，比process级别低
     * @param pjp
     */
    @Around("checkLoginPointcut() && !@annotation(com.cloudhua.imageplatform.controller.NoNeedAuth)")
    @Order(Integer.MAX_VALUE)
    public void authedProcess(ProceedingJoinPoint pjp) throws Throwable {

        RequestAttributes ra = RequestContextHolder.getRequestAttributes();
        ServletRequestAttributes sra = (ServletRequestAttributes) ra;
        HttpServletRequest request = sra.getRequest();
        HttpServletResponse response = sra.getResponse();
        // 查找参数、cookie、请求体中的token参数进行校验
        Object[] args = pjp.getArgs();
        HttpEnv httpEnv = null;
        for (Object obj: args) {
            if (obj instanceof HttpEnv) {
                httpEnv = (HttpEnv) obj;
                break;
            }
        }

        String language = request.getHeader("X-Language");
        if (language == null) {
            language = "zh";
        }
        if (httpEnv == null || httpEnv.getPathInfo() == null) {
            // http环境不存在抛出错误中断请求
            try {
                RespJsonErrorMsg.sendErrorMsg(language, response, StatusCode.TOKEN_NOT_FOUND);
            } catch (IOException e) {
                logger.error("authed failed, response client error msg failed.", e);
            }
            return;
        }

        String token = getRequestToken(httpEnv);

        if (token == null) {
            // token没有找到
            try {
                RespJsonErrorMsg.sendErrorMsg(language, response, StatusCode.TOKEN_NOT_FOUND);
            } catch (IOException e) {
                logger.error("authed failed, response client error msg failed.", e);
            }
            return;
        }

        // 验证token的合法性
        Token t = tokenMapper.getTokenInfo(token);
        if (t == null) {
            try {
                RespJsonErrorMsg.sendErrorMsg(language, response, StatusCode.TOKEN_EXPIRES);
            } catch (IOException e) {
                logger.error("authed failed, response client error msg failed.", e);
            }
            return;
        }
        long nowTime = System.currentTimeMillis();
        if (t.getExpires() < nowTime) {
            // token合法
            pjp.proceed(args);
        } else {
            // token过期
            try {
                RespJsonErrorMsg.sendErrorMsg(language, response, StatusCode.TOKEN_NOT_FOUND);
            } catch (IOException e) {
                logger.error("authed failed, response client error msg failed.", e);
            }
        }
    }

    public static String getRequestToken(HttpEnv httpEnv) {
        HttpServletRequest request = httpEnv.getRequest();
        String token = request.getParameter("token");
        if (token == null) {
            // 尝试从cookie中获取
            Cookie[] cookies = request.getCookies();
            for (Cookie cookie: cookies
                    ) {
                if ("token".equals(cookie.getName())) {
                    token = cookie.getValue();
                    break;
                }
            }

            Map<String, Object> map = httpEnv.getJsonParams();
            if (token == null && map != null) {
                // 从请求体参数中获取
                Object tokenObj = map.get("token");
                if (tokenObj != null) {
                    token = (String) tokenObj;
                }
            }
        }
        return token;
    }
}
